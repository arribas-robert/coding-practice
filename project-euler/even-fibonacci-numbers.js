/**
 * * Prompt:
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

/**
 * Steps:
 * 1. Know the input and output of the problem (e.g. First ten values of the Fibonacci sequence: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, â€¦,)
 * 2. Loop over the sequence keeping a running count of the sum of the EVEN values as long as the values DO NOT exceed 4 million
 * 3. In the loop add the necessary logic to determine if the value is an even #
 * 4. Establish the conditional within the loop that checks if the values are within the limit(4 million)
 * 5. Break the loop when the conditional is true and calculate the sum
 * 6. Determine big O for solution and refactor accordingly.
 */

// Todo: Add unit test and refactor

// My solution: 4613732. Big O for solution: O(n)
const main = () => {
  const result = calculateSum()
  console.log('Result :', result)
  return result
}

const calculateSum = (prevVal = 1, nextVal = 1, tempVal = 0, sum = 0) => {
  const limit = 4000000

  tempVal = prevVal + nextVal
  if (nextVal % 2 === 0) sum += nextVal
  prevVal = nextVal
  nextVal = tempVal
  return nextVal < limit ? calculateSum(prevVal, nextVal, tempVal, sum) : sum
}

main()

module.exports = {
  main,
}
